/// <reference types="lodash" />
import { Connection } from 'cypher-query-builder';
export declare class RepositoryQuery {
    private connection;
    private query;
    private dependencies;
    private returns;
    constructor(connection: Connection);
    addDependencies(deps: string[], willReturn?: boolean): RepositoryQuery;
    beginWithUser(id: string): RepositoryQuery;
    attachExternalEntitiesByParent(childEntity: string, parentEntity: string, attachArchived?: boolean): RepositoryQuery;
    fetchAllByEntityId(entityId: number, entity: string): RepositoryQuery;
    fetchAllByEntityUUUID(entityUUID: string, entity: string): RepositoryQuery;
    findAllPostsByUserId(userId: string, entity: string): RepositoryQuery;
    fetchDescendantTreeByUserId(userId: number): RepositoryQuery;
    fetchUserByUserId(userId: number): RepositoryQuery;
    attachExternalEntityByParent(childEntity: string, parentEntity: string, attachArchived?: boolean): RepositoryQuery;
    attachExternalEntityByParentList(childEntity: string, parentEntity: string): RepositoryQuery;
    attachInternalEntitiesByParent(childEntity: string, parentEntity: string, attachArchived?: boolean): RepositoryQuery;
    attachInternalEntityParentListByChildLabel(childEntity: string, parentEntity: string, attachArchived?: boolean): RepositoryQuery;
    beginWithUserById(id: number): RepositoryQuery;
    attachInternalEntityByParent(childEntity: string, parentEntity: string, attachArchived?: boolean): RepositoryQuery;
    attachInternalEntitiesByParentList(childEntity: string, parentEntity: string, deps?: string[], alias?: string): RepositoryQuery;
    callStart(): this;
    callEnd(): this;
    createEntitiesByParent(childEntity: string, parentEntity: string, properties: Record<string, any>[], relationProperty?: Record<string, any>): RepositoryQuery;
    createEntityByParent(childEntity: string, parentEntity: string, properties?: {}, relationProperty?: Record<string, any>): RepositoryQuery;
    createInternalRelations(childEntity: string, parentEntity: string, ids: number[]): RepositoryQuery;
    createExternalRelations(childEntity: string, parentEntity: string, ids: number[]): RepositoryQuery;
    createExternalRelation(childEntity: string, parentEntity: string, id: number): RepositoryQuery;
    createDescendantRelation(childEntity: string, parentEntity: string, id: number): RepositoryQuery;
    createMemberRelation(userId: number, treeId: number): RepositoryQuery;
    createMemberAndDescendantRelations(userId: number, toUserId: number, treeId: number): RepositoryQuery;
    createMemberAndMarriedRelations(userId: number, toUserId: number, treeId: number): RepositoryQuery;
    createMemberAndMarriedSubTreeRelations(userId: number, toUserId: number, treeId: number): RepositoryQuery;
    createEntity<T>(entity: string, props: T, uuid?: boolean): RepositoryQuery;
    createNode(entity: string): RepositoryQuery;
    private createResult;
    commit(): Promise<import("lodash").Dictionary<any>[]>;
    commitWithReturnEntities(): Promise<import("lodash").Dictionary<any>[]>;
    commitWithReturnEntity(): Promise<import("lodash").Dictionary<any>>;
    commitWithReturnCount(): Promise<import("lodash").Dictionary<any>>;
    convertEntityByParent(fromEntity: string, toEntity: string, parentEntity: any[], properties?: {}): RepositoryQuery;
    countSearchResultsByParentUsingContains(childEntity: string, parentEntity: string, params: string[], query: string, findArchived?: boolean): RepositoryQuery;
    countSearchResultsByParentUsingIndex(childEntity: string, parentEntity: string, indexName: string, query: string): RepositoryQuery;
    customReturn(query: string): RepositoryQuery;
    customWith(query: string): RepositoryQuery;
    deleteEntity(entity: string): RepositoryQuery;
    deleteEntityByParent(childEntity: string, parentEntity: string, id: number): RepositoryQuery;
    deleteEntityById(parentEntity: string, id: number): RepositoryQuery;
    deleteEntitiesByParents(childEntity: string, parentEntity: string): RepositoryQuery;
    deleteEntities(entity: string): RepositoryQuery;
    deleteRelationsByName(relationName: string): RepositoryQuery;
    findEntityByChild(childEntity: string, parentEntity: string): RepositoryQuery;
    findEntitiesByChild(childEntity: string, parentEntity: string): RepositoryQuery;
    findEntitiesByChildLabel(childEntity: string, parentEntity: string): RepositoryQuery;
    findEntitiesByChildId(childEntity: string, parentEntity: string, childId: number, willReturn?: boolean): RepositoryQuery;
    findEntityById(entity: string, id: number): RepositoryQuery;
    findEntityByIdWithoutName(id: number): RepositoryQuery;
    findEntityByIds(entity: string, ids: string[]): RepositoryQuery;
    findEntityByParent(childEntity: string, parentEntity: string, id?: number, willReturn?: boolean): RepositoryQuery;
    findEntitiesByParentByProperty(childEntity: string, parentEntity: string, propertyName: string, propertyValue: any): RepositoryQuery;
    findEntitiesByParent(childEntity: string, parentEntity: string, fetchArchived?: boolean): RepositoryQuery;
    findEntitiesByParentByIds(childEntity: string, parentEntity: string, ids: number[], attachArchived?: boolean): RepositoryQuery;
    findEntitiesByParents(childEntity: string, parentEntity: string, fetchArchived?: boolean): RepositoryQuery;
    findEntitiesByParentIfAny(childEntity: string, parentEntity: string): RepositoryQuery;
    findEntitiesByStatusAndDate(childEntity: string, parentEntity: string, childEntityStatus: string, completeDate: any): RepositoryQuery;
    findEntitiesByStatus(childEntity: string, parentEntity: string, childEntityStatus: string): RepositoryQuery;
    findWhereConditions(childEntity: string, parentEntity: string, where?: boolean, findArchived?: boolean): string;
    findWhereParentNotArchived(parentEntity: string): this;
    findWhereArchivedConditions(childEntity: string, parentEntity: string, where?: boolean): string;
    findUserByEmail(email: string): RepositoryQuery;
    findUsersByEmails(emails: Array<string>): RepositoryQuery;
    groupChildIntoParentAndReturn(childEntity: string, parentEntity: string, willReturn?: boolean): this;
    markDeletedEntityByParent(childEntity: string, parentEntity: string, id: number): RepositoryQuery;
    mergeAndSetValuesOnRelation(childEntity: string, parentEntity: string, toSetProperties?: {
        value: any;
        property: string;
        cypher?: string;
    }[]): RepositoryQuery;
    moveEntityToParent: (childEntity: string, parentEntity: string, id: number) => RepositoryQuery;
    raw(query: string): RepositoryQuery;
    resetClass(): void;
    removeDependencies(deps: string[]): RepositoryQuery;
    removeRelationFromEntityToParent: (childEntity: string, parentEntity: string) => RepositoryQuery;
    resolveEntityByInternalRelation: (childEntity: string, parentEntity: string) => RepositoryQuery;
    resolveUsersParentsByRelation: () => RepositoryQuery;
    resolveUsersSpouseByRelation: () => RepositoryQuery;
    resolveUsersChildrenByRelation: () => RepositoryQuery;
    resolveInternalRelations: (childEntity: string, parentEntity: string, ids: number[], findArchived?: boolean, customWith?: string) => RepositoryQuery;
    resolveExternalRelations: (childEntity: string, parentEntity: string, ids: number[]) => RepositoryQuery;
    resolveExternalRelation: (childEntity: string, parentEntity: string, id?: number, attachArchived?: boolean) => RepositoryQuery;
    resolveEntityOrDefaultByParent(childEntity: string, parentEntity: string, id: number, customWith?: string[]): RepositoryQuery;
    resolveEntitiesByParent(childEntity: string, parentEntity: string, withClause?: boolean): RepositoryQuery;
    resolveEntitiesByParentWhereRelationExists(childEntity: string, parentEntity: string, relation: string[], attachArchived?: boolean, includeWith?: boolean): RepositoryQuery;
    resolveDefaultEntityByParent(childEntity: string, parentEntity: string): RepositoryQuery;
    resolveDefaultEntityByName(childEntity: string, parentEntity: string, nameEntity: string): RepositoryQuery;
    resolveEntitiesByIds(entity: string, ids: number[], willReturn?: boolean, customWith?: string[], includeWith?: boolean): RepositoryQuery;
    searchEntitiesByParentUsingContains(childEntity: string, parentEntity: string, params: string[], query: string, findArchived?: boolean): RepositoryQuery;
    searchEntitiesByParentUsingIndex(childEntity: string, parentEntity: string, indexName: string, query: string, offset?: number, limit?: number): RepositoryQuery;
    searchEntitiesByParentsUsingIndex(childEntity: string, parentEntity: string, indexName: string, query: string, offset?: number, limit?: number): RepositoryQuery;
    private searchByParent;
    searchInvitedUserEntities(childEntity: string, indexName: string, query: string, offset?: number, limit?: number): RepositoryQuery;
    setPropertyOnEntity(entity: string, toSetProperties?: Record<string, any>): RepositoryQuery;
    setWorkspaceHistoryEntityByParent: (childEntity: string, parentEntity: string, workspaceHistoryId: number, workspaceId: number) => RepositoryQuery;
    unionCallProcessing: (subQueries: RepositoryQuery[], returnEntities: string[][]) => RepositoryQuery;
    union(all?: boolean): this;
    unwindEntities(entityList: string, toEntity: string): RepositoryQuery;
    updateEntity(childEntity: string, properties?: {}): RepositoryQuery;
    updateEntityList(childEntity: string, properties?: {}): RepositoryQuery;
    updateEntityByParent(childEntity: string, parentEntity: string, properties: {}, id: number): RepositoryQuery;
    updateOutcomeAllActionsDoneOnActionChange(toAddDependencies?: any[]): this;
    updateOutcomeAllActionsDoneOnOutcomeChange(actionIds: number[], tagIds: number[]): this;
    whereCombined(params: {
        query: string;
        joinOperator?: 'AND' | 'OR';
    }[], startOperator?: 'WHERE' | 'AND' | 'OR'): RepositoryQuery;
    wherePropertyValue(entity: string, param: string, values: any, addNOTcondition?: boolean, startOperator?: 'WHERE' | 'AND' | 'OR'): RepositoryQuery;
    withFirstDistinct(dependencies?: string[]): this;
}
export declare function addCreateDateToProperties(entity: string, properties?: {}): Record<string, string>;
export declare function addUuidToProperties(entity: string, properties?: {}): Record<string, string>;
export declare function addUpdateDateToProperties(entity: string, properties?: {}): Record<string, string>;
export declare const processEmptyNestedArray: (arr: any) => any;
export declare const processEntityIds: (array: any) => string;
export declare const processArrayProperty: (array: any) => any;
export declare const buildTree: (data: any) => any;
export declare const getDescendantRel: (data: any) => any;
export declare const getMarriedRel: (data: any) => any;
export declare const getMarriedSubTreeRel: (data: any) => any;
export declare const removeDuplicates: (originalArray: any, prop: any) => any[];
export declare const getSubTreeRootUser: (members: any, descendantRels: any, marriedRel: any, subTreeRel: any) => any;
export declare const getRootUser: (members: any, descendantRels: any, marriedRel: any, subTreeRel?: any) => any;
export declare const getEnterPointToSubTree: (subTreeRel: any) => any;
export declare const buildTreeFromRelations: (rootUser: any, members: any, descendantRels: any, marriedRel: any, subTree?: any, EnterPointToSubTree?: any) => any[];
export declare const Return: (array: any, ...args: any[]) => any[];
export declare const mapCypherResultToEntity: (input: any, expand?: any) => any;
